What happens when you initialize a repository? Why do you need to do it?

    The .git file is produced. The command enables a repository in this particular folder, but it does not add anythin 
by default into this repository.  

How is the staging area different from the working directory and the repository? What value do you think it offers?

  Probably (?) the changes made in the staging area are tracked. I am not sure what is the added value, except that 
it allows committing files one by one, rather than alltogether.    

How can you use the staging area to make sure you have one commit per
logical change?

   Move to the staging area only files that has to do with each
   logical change, not all the files that has been changed.  

What are some situations when branches would be hepful in keeping your
history organized? How would branches help?

    The main way I would use branches: if I have a working code, that
    might be OK, but I have an idea to improve it by changing it
    sigbificantly. I am not sure whether the idea will work or
    not. This is an iedeal case the branches can help. 

How do the diagrams help you visualize the branch structure?

    The diagrams simply show the structure of the repository,
    including the branches, where do they come from and who are their
    parents. 

What is the result of merging two branches together? Why do we
represent it in the diagram the way we do? 

    The result will include all the non-contradictory edits made
    separately on the two previously independent branches. 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing
merges manually? 
 
   Automatic is always a "minimal action" path, but it will not
   neccesarilly do what is right. Manual is more precise (I am doing
   what I want to do), but also more laborous. 


